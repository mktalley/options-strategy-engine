#!/usr/bin/env python3
"""
Train a scikit-learn model on backtest results for trade prediction.
"""
import argparse
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from joblib import dump

def main():
    parser = argparse.ArgumentParser(
        description="Train ML model from backtest_results.csv"
    )
    parser.add_argument(
        "--input", required=True,
        help="Path to backtest_results.csv generated by backtest.py"
    )
    parser.add_argument(
        "--output", default="model.joblib",
        help="Path to save trained model"
    )
    parser.add_argument(
        "--n-estimators", type=int, default=100,
        help="Number of trees for RandomForestClassifier"
    )
    parser.add_argument(
        "--max-depth", type=int, default=None,
        help="Max depth for RandomForestClassifier"
    )
    args = parser.parse_args()

    # Load data
    df = pd.read_csv(args.input)
    if df.empty:
        print(f"No data found in {args.input}")
        return

    # Preprocess features
    # Map textual trends and momentum to numeric scores
    trend_map = {"bullish": 1, "neutral": 0, "bearish": -1}
    momentum_map = {"positive": 1, "neutral": 0, "negative": -1}
    df['trend_score'] = df['trend'].map(trend_map).fillna(0)
    df['momentum_score'] = df['momentum'].map(momentum_map).fillna(0)

    # Define feature columns and target
    feature_cols = ['iv', 'trend_score', 'momentum_score', 'price', 'days_to_exp']
    X = df[feature_cols]
    y = (df['pl'] > 0).astype(int)

    # Train model
    clf = RandomForestClassifier(
        n_estimators=args.n_estimators,
        max_depth=args.max_depth,
        random_state=42
    )
    clf.fit(X, y)

    # Save model
    dump(clf, args.output)
    print(f"Model trained on {len(df)} samples and saved to {args.output}")

if __name__ == '__main__':
    main()
